apiVersion: v1
kind: Namespace
metadata:
  labels:
    team: team-infra
  name: cortex-monitoring-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    team: team-infra
  name: grafana
  namespace: cortex-monitoring-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    team: team-infra
  name: retrieval
  namespace: cortex-monitoring-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    team: team-infra
  name: grafana-clusterrole
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    team: team-infra
  name: retrieval
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/proxy
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    team: team-infra
  name: grafana-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: grafana-clusterrole
subjects:
- kind: ServiceAccount
  name: grafana
  namespace: cortex-monitoring-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    team: team-infra
  name: retrieval
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: retrieval
subjects:
- kind: ServiceAccount
  name: retrieval
  namespace: cortex-monitoring-system
---
apiVersion: v1
data:
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - access: proxy
      editable: false
      isDefault: true
      jsonData:
        httpHeaderName1: Authorization
        tlsSkipVerify: true
      name: Prometheus
      secureJsonData:
        httpHeaderValue1: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJDb3J0ZXggTW9uaXRvcmluZyBTeXN0ZW0iLCJpYXQiOjE2MjM2NzEzMzIsImF1ZCI6InFjbGFvZ3VpQGdtYWlsLmNvbSJ9.u9P_jhp28MzPUZNBXcQbHMb0lHaSxkSHOdqfRtffwoQ
      type: prometheus
      url: http://nginx.cortex-monitoring-system.svc/prometheus
    - name: loki
      type: loki
      url: http://loki.loki.svc:3100
  grafana.ini: |-
    [analytics]
    check_for_updates = false
    [auth]
    disable_login_form = false
    [auth.anonymous]
    enabled = true
    org_role = Viewer
    [auth.basic]
    enabled = true
    [dashboards]
    ;default_home_dashboard_path = /dashboards/cortex-writes.json
    [date_formats]
    date_format_use_browser_locale = true
    use_browser_locale = true
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [users]
    auto_assign_org_role = Viewer
kind: ConfigMap
metadata:
  labels:
    team: team-infra
  name: grafana-87ch5m52h9
  namespace: cortex-monitoring-system
---
apiVersion: v1
data:
  provider.yaml: |-
    apiVersion: 1
    providers:
    - name: 'sidecarProvider'
      orgId: 1
      type: file
      disableDeletion: false
      allowUiUpdates: false
      updateIntervalSeconds: 30
      options:
        foldersFromFilesStructure: true
        path: /dashboards
kind: ConfigMap
metadata:
  labels:
    team: team-infra
  name: grafana-config-dashboards-f9dhd6k9t5
  namespace: cortex-monitoring-system
---
apiVersion: v1
data:
  nginx.conf: |-
    worker_processes 5; ## Default: 1
    error_log /dev/stderr;
    pid /tmp/nginx.pid;
    worker_rlimit_nofile 8192;

    events {
      worker_connections 4096; ## Default: 1024
    }

    http {
      default_type application/octet-stream;
      # ref: http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size
      client_max_body_size 1m;
      log_format main '$remote_addr - $remote_user [$time_local] $status '
      '"$request" $body_bytes_sent "$http_referer" '
      '"$http_user_agent" "$http_x_forwarded_for" "$http_x_scope_orgid"';
      access_log /dev/stderr main;
      sendfile on;
      tcp_nopush on;
      resolver kube-dns.kube-system.svc.cluster.local;

      server {
        listen 80;
        proxy_set_header X-Scope-OrgID 0;
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        proxy_http_version 1.1;

        location = /healthz {
          default_type text/html;
          return 200 'alive';
        }

        # Distributor Config
        location = /ring {
          proxy_pass http://distributor.cortex-monitoring-system.svc.cluster.local$request_uri;
        }


        location = /all_user_stats {
          proxy_pass http://distributor.cortex-monitoring-system.svc.cluster.local$request_uri;
        }

        location = /ha_tracker {
          proxy_pass http://distributor.cortex-monitoring-system.svc.cluster.local$request_uri;
        }

        # remote_write path
        location = /api/v1/push {
          proxy_pass http://distributor.cortex-monitoring-system.svc.cluster.local$request_uri;
        }

        location ~ prometheus/api/v1/rules {
          proxy_pass http://ruler.cortex-monitoring-system.svc.cluster.local$request_uri;
        }

        # Query and remote_read path
        location ~ /prometheus/.* {
          proxy_pass http://query-frontend.cortex-monitoring-system.svc.cluster.local$request_uri;
        }

        # Query Config TODO(qc)
        location ~ /api/prom/.* {
          proxy_pass http://query-frontend.cortex-monitoring-system.svc.cluster.local$request_uri;
        }

        # Alertmanager Config
        location ~ /api/prom/alertmanager/.* {
          proxy_pass http://alertmanager-headless.cortex-monitoring-system.svc.cluster.local$request_uri;
        }

        location ~ /api/v1/alerts {
          proxy_pass http://alertmanager-headless.cortex-monitoring-system.svc.cluster.local$request_uri;
        }

        # Ruler Config
        location ~ /api/v1/rules {
          proxy_pass http://ruler.cortex-monitoring-system.svc.cluster.local$request_uri;
        }

        location ~ /multitenant_alertmanager/status {
          proxy_pass http://alertmanager-headless.cortex-monitoring-system.svc.cluster.local$request_uri;
        }

        location ~ /ruler/ring {
          proxy_pass http://ruler.cortex-monitoring-system.svc.cluster.local$request_uri;
        }

        ## New Query frontend APIs as per https://cortexmetrics.io/docs/api/#querier--query-frontend
        location ~ ^prometheus/api/v1/(read|metadata|labels|series|query_range|query) {
          proxy_pass http://query-frontend.cortex-monitoring-system.svc.cluster.local$request_uri;
        }

        location ~ prometheus/api/v1/label/.* {
          proxy_pass http://query-frontend.cortex-monitoring-system.svc.cluster.local$request_uri;
        }
      }
    }
kind: ConfigMap
metadata:
  labels:
    team: team-infra
  name: nginx-k5g5f4tmg8
  namespace: cortex-monitoring-system
---
apiVersion: v1
data:
  prometheus.yml: |-
    global:
      scrape_interval: 10s # By default, scrape targets every 15 seconds.
      external_labels:
        cluster: cortex
        prometheus_replica: replica_0

    remote_write:
    - url: http://nginx.cortex-monitoring-system.svc.cluster.local:80/api/v1/push

    scrape_configs:
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - cortex-monitoring-system

      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      # fix minio 401
      # bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      # You can specify the following annotations (on pods):
      #   prometheus.io.scrape: false - don't scrape this pod
      #   prometheus.io.scheme: https - use https for scraping
      #   prometheus.io.port - scrape this port
      #   prometheus.io.path - scrape this path
      relabel_configs:

      # Always use HTTPS for the api server
      - source_labels: [__meta_kubernetes_service_label_component]
        regex: apiserver
        action: replace
        target_label: __scheme__
        replacement: https

      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
        replacement: $1


      # Drop anything annotated with prometheus.io.scrape=false
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: drop
        regex: false

      # Drop any endpoint who's pod port name ends with -noscrape
      - source_labels: [__meta_kubernetes_pod_container_port_name]
        action: drop
        regex: .*-noscrape

      # Allow pods to override the scrape scheme with prometheus.io.scheme=https
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: ^(https?)$
        replacement: $1

      # Allow service to override the scrape path with prometheus.io.path=/other_metrics_path
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: ^(.+)$
        replacement: $1

      # Allow services to override the scrape port with prometheus.io.port=1234
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: (.+?)(\:\d+)?;(\d+)
        replacement: $1:$3

      # Drop pods without a name label
      - source_labels: [__meta_kubernetes_pod_label_app]
        action: drop
        regex: ^$

      # Rename jobs to be <namespace>/<name, from pod name label>
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_pod_label_app]
        action: replace
        separator: /
        target_label: job
        replacement: $1

      # Rename instances to be the pod name
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: instance

      # Include node name as a extra field
      - source_labels: [__meta_kubernetes_pod_node_name]
        target_label: node

    # This scrape config gather all nodes
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node

      # couldn't get prometheus to validate the kublet cert for scraping, so don't bother for now
      tls_config:
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      relabel_configs:
      - target_label: __scheme__
        replacement: https
      - source_labels: [__meta_kubernetes_node_label_kubernetes_io_hostname]
        target_label: instance

    # This scrape config just pulls in the default/kubernetes service
    - job_name: 'kubernetes-service'
      kubernetes_sd_configs:
      - role: endpoints

      tls_config:
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_component]
        regex: apiserver
        action: keep

      - target_label: __scheme__
        replacement: https

      - source_labels: []
        target_label: job
        replacement: default/kubernetes
kind: ConfigMap
metadata:
  labels:
    team: team-infra
  name: retrieval-config-k5g65682fg
  namespace: cortex-monitoring-system
---
apiVersion: v1
data:
  runtime.yaml: |-
    overrides:
      "0":
        ingestion_burst_size: 350000
        ingestion_rate: 350000
        max_global_series_per_metric: 300000
        max_global_series_per_user: 300000
        max_series_per_metric: 0
        max_series_per_user: 0
        max_samples_per_query: 100000
        max_series_per_query: 100000
    ingester_stream_chunks_when_using_blocks: true
kind: ConfigMap
metadata:
  labels:
    team: team-infra
  name: runtime-config-4472tcfg89
  namespace: cortex-monitoring-system
---
apiVersion: v1
data:
  cortex.yaml: |
    YXV0aF9lbmFibGVkOiB0cnVlCmh0dHBfcHJlZml4OiAvYXBpL3Byb20KYXBpOgogIHJlc3
    BvbnNlX2NvbXByZXNzaW9uX2VuYWJsZWQ6IHRydWUKICBhbGVydG1hbmFnZXJfaHR0cF9w
    cmVmaXg6IC9hbGVydG1hbmFnZXIKICBwcm9tZXRoZXVzX2h0dHBfcHJlZml4OiAvcHJvbW
    V0aGV1cwpzZXJ2ZXI6CiAgaHR0cF9saXN0ZW5fcG9ydDogODAKICBodHRwX2xpc3Rlbl9j
    b25uX2xpbWl0OiAwCiAgZ3JwY19saXN0ZW5fcG9ydDogOTA5NQogIGdycGNfbGlzdGVuX2
    Nvbm5fbGltaXQ6IDAKICBncnBjX3NlcnZlcl9tYXhfcmVjdl9tc2dfc2l6ZTogMTA0ODU3
    NjAwCiAgZ3JwY19zZXJ2ZXJfbWF4X3NlbmRfbXNnX3NpemU6IDEwNDg1NzYwMAogIGdycG
    Nfc2VydmVyX21heF9jb25jdXJyZW50X3N0cmVhbXM6IDEwMDAKICBncnBjX3NlcnZlcl9r
    ZWVwYWxpdmVfdGltZTogMmgKICBncnBjX3NlcnZlcl9rZWVwYWxpdmVfdGltZW91dDogMj
    BzCiAgZ3JwY19zZXJ2ZXJfbWluX3RpbWVfYmV0d2Vlbl9waW5nczogMTBzCiAgZ3JwY19z
    ZXJ2ZXJfcGluZ193aXRob3V0X3N0cmVhbV9hbGxvd2VkOiB0cnVlCiAgbG9nX2Zvcm1hdD
    ogbG9nZm10CiAgbG9nX2xldmVsOiBpbmZvCmRpc3RyaWJ1dG9yOgogIGhhX3RyYWNrZXI6
    CiAgICBlbmFibGVfaGFfdHJhY2tlcjogdHJ1ZQogICAga3ZzdG9yZToKICAgICAgc3Rvcm
    U6IGNvbnN1bCAjIE5vdGU6IE1lbWJlcmxpc3QgaXMgbm90IHN1cHBvcnRlZC4gaHR0cHM6
    Ly9jb3J0ZXhtZXRyaWNzLmlvL2RvY3MvYXJjaGl0ZWN0dXJlLyNoaWdoLWF2YWlsYWJpbG
    l0eS10cmFja2VyCiAgICAgIHByZWZpeDogcHJvbV9oYS8KICAgICAgY29uc3VsOgogICAg
    ICAgIGhvc3Q6IGNvbnN1bC1oZWFkbGVzcy5jb3J0ZXgtbW9uaXRvcmluZy1zeXN0ZW0uc3
    ZjLmNsdXN0ZXIubG9jYWw6ODUwMAogIHNoYXJkaW5nX3N0cmF0ZWd5OiBzaHVmZmxlLXNo
    YXJkaW5nCiAgc2hhcmRfYnlfYWxsX2xhYmVsczogdHJ1ZQogIHJpbmc6CiAgICBrdnN0b3
    JlOgogICAgICBzdG9yZTogbWVtYmVybGlzdApxdWVyaWVyOgogIHF1ZXJ5X2luZ2VzdGVy
    c193aXRoaW46IDhoCiAgcXVlcnlfc3RvcmVfZm9yX2xhYmVsc19lbmFibGVkOiB0cnVlCi
    AgYXRfbW9kaWZpZXJfZW5hYmxlZDogdHJ1ZQogIHF1ZXJ5X3N0b3JlX2FmdGVyOiA3aApp
    bmdlc3Rlcl9jbGllbnQ6CiAgZ3JwY19jbGllbnRfY29uZmlnOgogICAgbWF4X3JlY3ZfbX
    NnX3NpemU6IDEwNDg1NzYwMAogICAgbWF4X3NlbmRfbXNnX3NpemU6IDEwNDg1NzYwMAog
    ICAgZ3JwY19jb21wcmVzc2lvbjogc25hcHB5CmluZ2VzdGVyOgogIHdhbGNvbmZpZzoKIC
    AgIHdhbF9lbmFibGVkOiB0cnVlCiAgICByZWNvdmVyX2Zyb21fd2FsOiB0cnVlCiAgICB3
    YWxfZGlyOiAvZGF0YS93YWxfZGF0YQogICAgZmx1c2hfb25fc2h1dGRvd25fd2l0aF93YW
    xfZW5hYmxlZDogZmFsc2UKICBsaWZlY3ljbGVyOgogICAgcmluZzoKICAgICAga3ZzdG9y
    ZToKICAgICAgICBzdG9yZTogbWVtYmVybGlzdAogICAgICByZXBsaWNhdGlvbl9mYWN0b3
    I6IDEKICAgICAgem9uZV9hd2FyZW5lc3NfZW5hYmxlZDogZmFsc2UKICAgIG51bV90b2tl
    bnM6IDUxMgogICAgb2JzZXJ2ZV9wZXJpb2Q6IDEwcwogICAgam9pbl9hZnRlcjogMTBzCi
    AgICB0b2tlbnNfZmlsZV9wYXRoOiAvZGF0YS90b2tlbnMKICBhY3RpdmVfc2VyaWVzX21l
    dHJpY3NfZW5hYmxlZDogdHJ1ZQpzdG9yYWdlOgogIGVuZ2luZTogYmxvY2tzCiAgaW5kZX
    hfcXVlcmllc19jYWNoZV9jb25maWc6CiAgICBtZW1jYWNoZWQ6CiAgICAgIGV4cGlyYXRp
    b246IDFoCiAgICBtZW1jYWNoZWRfY2xpZW50OgogICAgICBhZGRyZXNzZXM6IGRuc3Nydm
    5vYStfdGNwLW1lbWNhY2hlZC5fdGNwLm1lbWNhY2hlZC1oZWFkbGVzcy5jb3J0ZXgtbW9u
    aXRvcmluZy1zeXN0ZW0uc3ZjLmNsdXN0ZXIubG9jYWw6MTEyMTEKICAgICAgdGltZW91dD
    ogMXMKbGltaXRzOgogIGluZ2VzdGlvbl9yYXRlOiAyNTAwMDAwCiAgaW5nZXN0aW9uX3Jh
    dGVfc3RyYXRlZ3k6IGdsb2JhbAogIGluZ2VzdGlvbl9idXJzdF9zaXplOiAyMjUwMDAwMA
    ogIGFjY2VwdF9oYV9zYW1wbGVzOiB0cnVlCiAgaGFfY2x1c3Rlcl9sYWJlbDogY2x1c3Rl
    cgogIGhhX3JlcGxpY2FfbGFiZWw6IHByb21ldGhldXNfcmVwbGljYQogIGRyb3BfbGFiZW
    xzOiBbXQogIG1heF9sYWJlbF9uYW1lX2xlbmd0aDogMTAyNAogIG1heF9sYWJlbF92YWx1
    ZV9sZW5ndGg6IDIwNDgKICBtYXhfbGFiZWxfbmFtZXNfcGVyX3NlcmllczogMzAKICBtYX
    hfbWV0YWRhdGFfbGVuZ3RoOiAxMDI0CiAgcmVqZWN0X29sZF9zYW1wbGVzOiB0cnVlCiAg
    cmVqZWN0X29sZF9zYW1wbGVzX21heF9hZ2U6IDE2OGgKICBlbmZvcmNlX21ldGFkYXRhX2
    1ldHJpY19uYW1lOiB0cnVlCiAgZW5mb3JjZV9tZXRyaWNfbmFtZTogdHJ1ZQogIGluZ2Vz
    dGlvbl90ZW5hbnRfc2hhcmRfc2l6ZTogMQogIG1heF9zZXJpZXNfcGVyX3F1ZXJ5OiAxMD
    AwMDAKICBtYXhfc2FtcGxlc19wZXJfcXVlcnk6IDMwMDAwMDAKICBtYXhfc2VyaWVzX3Bl
    cl91c2VyOiAwCiAgbWF4X3Nlcmllc19wZXJfbWV0cmljOiAwCiAgbWF4X2dsb2JhbF9zZX
    JpZXNfcGVyX3VzZXI6IDE2MDAwMDAwCiAgbWF4X2dsb2JhbF9zZXJpZXNfcGVyX21ldHJp
    YzogMTYwMDAwMAogIG1pbl9jaHVua19sZW5ndGg6IDAKICBtYXhfbWV0YWRhdGFfcGVyX3
    VzZXI6IDgwMDAKICBtYXhfbWV0YWRhdGFfcGVyX21ldHJpYzogMTAKICBtYXhfZ2xvYmFs
    X21ldGFkYXRhX3Blcl91c2VyOiAwCiAgbWF4X2dsb2JhbF9tZXRhZGF0YV9wZXJfbWV0cm
    ljOiAwCiAgbWF4X2NodW5rc19wZXJfcXVlcnk6IDIwMDAwMDAKICBtYXhfcXVlcnlfbGVu
    Z3RoOiA3NjhoCiAgbWF4X3F1ZXJ5X3BhcmFsbGVsaXNtOiAxNAogIGNhcmRpbmFsaXR5X2
    xpbWl0OiAxMDAwMDAKICBtYXhfY2FjaGVfZnJlc2huZXNzOiAxbQogIG1heF9xdWVyaWVy
    c19wZXJfdGVuYW50OiAwCiAgcnVsZXJfZXZhbHVhdGlvbl9kZWxheV9kdXJhdGlvbjogMT
    BzCiAgcnVsZXJfdGVuYW50X3NoYXJkX3NpemU6IDEKICBydWxlcl9tYXhfcnVsZXNfcGVy
    X3J1bGVfZ3JvdXA6IDAKICBydWxlcl9tYXhfcnVsZV9ncm91cHNfcGVyX3RlbmFudDogMA
    ogIHN0b3JlX2dhdGV3YXlfdGVuYW50X3NoYXJkX3NpemU6IDEKICBjb21wYWN0b3JfYmxv
    Y2tzX3JldGVudGlvbl9wZXJpb2Q6IDBzCmZyb250ZW5kX3dvcmtlcjoKICBzY2hlZHVsZX
    JfYWRkcmVzczogcXVlcnktc2NoZWR1bGVyLWhlYWRsZXNzOjkwOTUKICBtYXRjaF9tYXhf
    Y29uY3VycmVudDogdHJ1ZQogIGdycGNfY2xpZW50X2NvbmZpZzoKICAgIG1heF9yZWN2X2
    1zZ19zaXplOiAxMDQ4NTc2MDAKICAgIG1heF9zZW5kX21zZ19zaXplOiAxMDQ4NTc2MDAK
    ICAgIGdycGNfY29tcHJlc3Npb246IHNuYXBweQpmcm9udGVuZDoKICBsb2dfcXVlcmllc1
    9sb25nZXJfdGhhbjogMTBzCiAgcXVlcnlfc3RhdHNfZW5hYmxlZDogdHJ1ZQogIG1heF9v
    dXRzdGFuZGluZ19wZXJfdGVuYW50OiAxMDAwCiAgc2NoZWR1bGVyX2FkZHJlc3M6IHF1ZX
    J5LXNjaGVkdWxlci1oZWFkbGVzczo5MDk1CiAgc2NoZWR1bGVyX3dvcmtlcl9jb25jdXJy
    ZW5jeTogNQogIGdycGNfY2xpZW50X2NvbmZpZzoKICAgIG1heF9yZWN2X21zZ19zaXplOi
    AxMDQ4NTc2MDAKICAgIG1heF9zZW5kX21zZ19zaXplOiAxMDQ4NTc2MDAKICAgIGdycGNf
    Y29tcHJlc3Npb246IHNuYXBweQpxdWVyeV9yYW5nZToKICBzcGxpdF9xdWVyaWVzX2J5X2
    ludGVydmFsOiAyNGgKICBhbGlnbl9xdWVyaWVzX3dpdGhfc3RlcDogdHJ1ZQogICMgaHR0
    cHM6Ly9naXRodWIuY29tL2NvcnRleHByb2plY3QvY29ydGV4LWhlbG0tY2hhcnQvYmxvYi
    8wZTFiNzI0YmI4YWEzNjRkNmFiYThlYTlhNDkwMmUyNGQxYTg4Y2RmL3ZhbHVlcy55YW1s
    I0wxNTQKICByZXN1bHRzX2NhY2hlOgogICAgY2FjaGU6CiAgICAgIG1lbWNhY2hlZDoKIC
    AgICAgICBleHBpcmF0aW9uOiAxaAogICAgICBtZW1jYWNoZWRfY2xpZW50OgogICAgICAg
    IGFkZHJlc3NlczogZG5zc3J2bm9hK190Y3AtbWVtY2FjaGVkLl90Y3AubWVtY2FjaGVkLW
    hlYWRsZXNzLmNvcnRleC1tb25pdG9yaW5nLXN5c3RlbS5zdmMuY2x1c3Rlci5sb2NhbDox
    MTIxMQogICAgICAgIHRpbWVvdXQ6IDFzCiAgY2FjaGVfcmVzdWx0czogdHJ1ZQpibG9ja3
    Nfc3RvcmFnZToKICBiYWNrZW5kOiBzMwogIHMzOgogICAgZW5kcG9pbnQ6IHMzLmNvcnRl
    eC1tb25pdG9yaW5nLXN5c3RlbS5zdmMuY2x1c3Rlci5sb2NhbDo5MDAwCiAgICBidWNrZX
    RfbmFtZTogY29ydGV4LXRzZGIKICAgIHNlY3JldF9hY2Nlc3Nfa2V5OiBzdXBlcnNlY3Jl
    dAogICAgYWNjZXNzX2tleV9pZDogY29ydGV4CiAgICBpbnNlY3VyZTogdHJ1ZQogICAgaH
    R0cDoKICAgICAgaW5zZWN1cmVfc2tpcF92ZXJpZnk6IHRydWUKICBidWNrZXRfc3RvcmU6
    CiAgICBzeW5jX2RpcjogL2RhdGEvdHNkYi1zeW5jCiAgICBpbmRleF9jYWNoZToKICAgIC
    AgYmFja2VuZDogbWVtY2FjaGVkCiAgICAgIG1lbWNhY2hlZDoKICAgICAgICBhZGRyZXNz
    ZXM6IGRuc3Nydm5vYStfdGNwLW1lbWNhY2hlZC5fdGNwLm1lbWNhY2hlZC1oZWFkbGVzcy
    5jb3J0ZXgtbW9uaXRvcmluZy1zeXN0ZW0uc3ZjLmNsdXN0ZXIubG9jYWw6MTEyMTEKICAg
    ICAgICBtYXhfYXN5bmNfYnVmZmVyX3NpemU6IDI1MDAwCiAgICAgICAgdGltZW91dDogMX
    MKICAgIGNodW5rc19jYWNoZToKICAgICAgYmFja2VuZDogbWVtY2FjaGVkCiAgICAgIG1l
    bWNhY2hlZDoKICAgICAgICBhZGRyZXNzZXM6IGRuc3Nydm5vYStfdGNwLW1lbWNhY2hlZC
    5fdGNwLm1lbWNhY2hlZC1oZWFkbGVzcy5jb3J0ZXgtbW9uaXRvcmluZy1zeXN0ZW0uc3Zj
    LmNsdXN0ZXIubG9jYWw6MTEyMTEKICAgICAgICBtYXhfYXN5bmNfYnVmZmVyX3NpemU6ID
    I1MDAwCiAgICAgICAgdGltZW91dDogMXMKICAgIG1ldGFkYXRhX2NhY2hlOgogICAgICBi
    YWNrZW5kOiBtZW1jYWNoZWQKICAgICAgbWVtY2FjaGVkOgogICAgICAgIGFkZHJlc3Nlcz
    ogZG5zc3J2bm9hK190Y3AtbWVtY2FjaGVkLl90Y3AubWVtY2FjaGVkLWhlYWRsZXNzLmNv
    cnRleC1tb25pdG9yaW5nLXN5c3RlbS5zdmMuY2x1c3Rlci5sb2NhbDoxMTIxMQogICAgIC
    AgIG1heF9hc3luY19idWZmZXJfc2l6ZTogMjUwMDAKICAgICAgICB0aW1lb3V0OiAxcwog
    ICAgaWdub3JlX2RlbGV0aW9uX21hcmtfZGVsYXk6IDNoCiAgICBidWNrZXRfaW5kZXg6Ci
    AgICAgIGVuYWJsZWQ6IHRydWUKICAgIGluZGV4X2hlYWRlcl9sYXp5X2xvYWRpbmdfZW5h
    YmxlZDogdHJ1ZQogICAgaW5kZXhfaGVhZGVyX2xhenlfbG9hZGluZ19pZGxlX3RpbWVvdX
    Q6IDYwbQogIHRzZGI6CiAgICBkaXI6IC9kYXRhL3RzZGIKICAgIHJldGVudGlvbl9wZXJp
    b2Q6IDZoCiAgICB3YWxfY29tcHJlc3Npb25fZW5hYmxlZDogdHJ1ZQogICAgZmx1c2hfYm
    xvY2tzX29uX3NodXRkb3duOiBmYWxzZQpjb21wYWN0b3I6CiAgYmxvY2tfZGVsZXRpb25f
    bWFya3NfbWlncmF0aW9uX2VuYWJsZWQ6IHRydWUKICBkYXRhX2RpcjogL2RhdGEKICBzaG
    FyZGluZ19lbmFibGVkOiB0cnVlCiAgc2hhcmRpbmdfcmluZzoKICAgIGt2c3RvcmU6CiAg
    ICAgIHN0b3JlOiBtZW1iZXJsaXN0CnN0b3JlX2dhdGV3YXk6CiAgc2hhcmRpbmdfZW5hYm
    xlZDogdHJ1ZQogIHNoYXJkaW5nX3Jpbmc6CiAgICBrdnN0b3JlOgogICAgICBzdG9yZTog
    bWVtYmVybGlzdAogICAgcmVwbGljYXRpb25fZmFjdG9yOiAxCiAgc2hhcmRpbmdfc3RyYX
    RlZ3k6IHNodWZmbGUtc2hhcmRpbmcKdGVuYW50X2ZlZGVyYXRpb246CiAgZW5hYmxlZDog
    dHJ1ZQpydWxlcjoKICBleHRlcm5hbF91cmw6IGh0dHA6Ly9hbGVydG1hbmFnZXItaGVhZG
    xlc3MuY29ydGV4LW1vbml0b3Jpbmctc3lzdGVtLnN2Yy5jbHVzdGVyLmxvY2FsCiAgcnVs
    ZXJfY2xpZW50OgogICAgbWF4X3JlY3ZfbXNnX3NpemU6IDEwNDg1NzYwMAogICAgbWF4X3
    NlbmRfbXNnX3NpemU6IDEwNDg1NzYwMAogICAgZ3JwY19jb21wcmVzc2lvbjogc25hcHB5
    CiAgYWxlcnRtYW5hZ2VyX3VybDogaHR0cDovL2FsZXJ0bWFuYWdlci1oZWFkbGVzcy5jb3
    J0ZXgtbW9uaXRvcmluZy1zeXN0ZW0uc3ZjL2FwaS9wcm9tL2FsZXJ0bWFuYWdlcgogIGVu
    YWJsZV9hbGVydG1hbmFnZXJfZGlzY292ZXJ5OiBmYWxzZQogIGVuYWJsZV9hbGVydG1hbm
    FnZXJfdjI6IGZhbHNlCiAgYWxlcnRtYW5hZ2VyX2NsaWVudDoKICAgIHRsc19pbnNlY3Vy
    ZV9za2lwX3ZlcmlmeTogZmFsc2UKICAgIGJhc2ljX2F1dGhfdXNlcm5hbWU6ICIiCiAgIC
    BiYXNpY19hdXRoX3Bhc3N3b3JkOiAiIgogIGVuYWJsZV9zaGFyZGluZzogdHJ1ZQogIHNo
    YXJkaW5nX3N0cmF0ZWd5OiBzaHVmZmxlLXNoYXJkaW5nCiAgcmluZzoKICAgIGt2c3Rvcm
    U6CiAgICAgIHN0b3JlOiBtZW1iZXJsaXN0CiAgZW5hYmxlX2FwaTogdHJ1ZQpydWxlcl9z
    dG9yYWdlOgogIGJhY2tlbmQ6IHMzCiAgczM6CiAgICBlbmRwb2ludDogczMuY29ydGV4LW
    1vbml0b3Jpbmctc3lzdGVtLnN2Yy5jbHVzdGVyLmxvY2FsOjkwMDAKICAgIGJ1Y2tldF9u
    YW1lOiBjb3J0ZXgtcnVsZXMKICAgIHNlY3JldF9hY2Nlc3Nfa2V5OiBzdXBlcnNlY3JldA
    ogICAgYWNjZXNzX2tleV9pZDogY29ydGV4CiAgICBpbnNlY3VyZTogdHJ1ZQogICAgaHR0
    cDoKICAgICAgaW5zZWN1cmVfc2tpcF92ZXJpZnk6IHRydWUKYWxlcnRtYW5hZ2VyOgogIG
    V4dGVybmFsX3VybDogL2FwaS9wcm9tL2FsZXJ0bWFuYWdlcgogIHNoYXJkaW5nX2VuYWJs
    ZWQ6IHRydWUKICBzaGFyZGluZ19yaW5nOgogICAga3ZzdG9yZToKICAgICAgc3RvcmU6IG
    1lbWJlcmxpc3QKICAgIHJlcGxpY2F0aW9uX2ZhY3RvcjogMQogIGF1dG9fd2ViaG9va19y
    b290OiAiIgogIGNsdXN0ZXI6CiAgICBsaXN0ZW5fYWRkcmVzczogMC4wLjAuMDo5MDk0Ci
    AgICBwZWVyczogImFsZXJ0bWFuYWdlci0wLmFsZXJ0bWFuYWdlci1oZWFkbGVzcy5jb3J0
    ZXgtbW9uaXRvcmluZy1zeXN0ZW0uc3ZjLmNsdXN0ZXIubG9jYWw6OTA5NCIKICBlbmFibG
    VfYXBpOiB0cnVlCmFsZXJ0bWFuYWdlcl9zdG9yYWdlOgogIGJhY2tlbmQ6IHMzCiAgczM6
    CiAgICBlbmRwb2ludDogczMuY29ydGV4LW1vbml0b3Jpbmctc3lzdGVtLnN2Yy5jbHVzdG
    VyLmxvY2FsOjkwMDAKICAgIGJ1Y2tldF9uYW1lOiBjb3J0ZXgtcnVsZXMKICAgIHNlY3Jl
    dF9hY2Nlc3Nfa2V5OiBzdXBlcnNlY3JldAogICAgYWNjZXNzX2tleV9pZDogY29ydGV4Ci
    AgICBpbnNlY3VyZTogdHJ1ZQogICAgaHR0cDoKICAgICAgaW5zZWN1cmVfc2tpcF92ZXJp
    Znk6IHRydWUKcnVudGltZV9jb25maWc6CiAgcGVyaW9kOiAxMHMKICBmaWxlOiAvdmFyL2
    NvcnRleC9ydW50aW1lLnlhbWwKbWVtYmVybGlzdDoKICBqb2luX21lbWJlcnM6IFsiZG5z
    K2dvc3NpcC1yaW5nLWhlYWRsZXNzOjc5NDYiXQogIGFib3J0X2lmX2NsdXN0ZXJfam9pbl
    9mYWlsczogZmFsc2UKICBiaW5kX2FkZHI6IFtdCiAgYmluZF9wb3J0OiA3OTQ2CnF1ZXJ5
    X3NjaGVkdWxlcjoKICBtYXhfb3V0c3RhbmRpbmdfcmVxdWVzdHNfcGVyX3RlbmFudDogMT
    AwCiAgZ3JwY19jbGllbnRfY29uZmlnOgogICAgbWF4X3JlY3ZfbXNnX3NpemU6IDEwNDg1
    NzYwMAogICAgbWF4X3NlbmRfbXNnX3NpemU6IDEwNDg1NzYwMAogICAgZ3JwY19jb21wcm
    Vzc2lvbjogc25hcHB5
kind: Secret
metadata:
  labels:
    team: team-infra
  name: cortex-config-4d89b2thm6
  namespace: cortex-monitoring-system
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: alertmanager
    team: team-infra
  name: alertmanager-headless
  namespace: cortex-monitoring-system
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 80
    protocol: TCP
  - name: http-web
    port: 9093
    protocol: TCP
  - name: tcp-cluster
    port: 9094
    protocol: TCP
  - name: udp-cluster
    port: 9094
    protocol: UDP
  - name: grpc-am
    port: 9095
    protocol: TCP
  publishNotReadyAddresses: true
  selector:
    app: alertmanager
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: compactor
    team: team-infra
  name: compactor-headless
  namespace: cortex-monitoring-system
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 80
  selector:
    app: compactor
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: consul-server
    team: team-infra
  name: consul-headless
  namespace: cortex-monitoring-system
spec:
  clusterIP: None
  ports:
  - name: http
    port: 8500
    protocol: TCP
    targetPort: 8500
  - name: tcp-serflan
    port: 8301
    protocol: TCP
    targetPort: 8301
  - name: udp-serflan
    port: 8301
    protocol: UDP
    targetPort: 8301
  - name: tcp-serfwan
    port: 8302
    protocol: TCP
    targetPort: 8302
  - name: udp-serfwan
    port: 8302
    protocol: UDP
    targetPort: 8302
  - name: tcp-server
    port: 8300
    protocol: TCP
    targetPort: 8300
  - name: tcp-dns
    port: 8600
    protocol: TCP
    targetPort: 8600
  - name: udp-dns
    port: 8600
    protocol: UDP
    targetPort: 8600
  publishNotReadyAddresses: true
  selector:
    app: consul-server
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: distributor
    team: team-infra
  name: distributor
  namespace: cortex-monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 80
  - name: grpc-distribut
    port: 9095
  selector:
    app: distributor
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: distributor
    team: team-infra
  name: distributor-headless
  namespace: cortex-monitoring-system
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 80
  - name: grpc-distributor
    port: 9095
  publishNotReadyAddresses: true
  selector:
    app: distributor
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gossip-ring
    team: team-infra
  name: gossip-ring-headless
  namespace: cortex-monitoring-system
spec:
  clusterIP: None
  ports:
  - name: tcp-gossip-ring
    port: 7946
    protocol: TCP
    targetPort: 7946
  publishNotReadyAddresses: true
  selector:
    gossip_ring_member: "true"
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: grafana
    team: team-infra
  name: grafana
  namespace: cortex-monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 3000
  - name: http-service
    port: 80
  selector:
    app: grafana
    team: team-infra
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ingester
    team: team-infra
  name: ingester-headless
  namespace: cortex-monitoring-system
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 80
  - name: grpc-ingester
    port: 9095
  selector:
    app: ingester
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: memcached
    team: team-infra
  name: memcached-headless
  namespace: cortex-monitoring-system
spec:
  clusterIP: None
  ports:
  - name: tcp-memcached
    port: 11211
  - name: http-metrics
    port: 9150
  selector:
    app: memcached
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx
    team: team-infra
  name: nginx
  namespace: cortex-monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 80
  selector:
    app: nginx
    team: team-infra
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: querier
    team: team-infra
  name: querier
  namespace: cortex-monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 80
  - name: grpc-querier
    port: 9095
  selector:
    app: querier
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: query-frontend
    team: team-infra
  name: query-frontend
  namespace: cortex-monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 80
  - name: grpc-frontend
    port: 9095
  selector:
    app: query-frontend
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: query-frontend
    team: team-infra
  name: query-frontend-headless
  namespace: cortex-monitoring-system
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 80
  - name: grpc-frontend
    port: 9095
  publishNotReadyAddresses: true
  selector:
    app: query-frontend
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: query-scheduler
    team: team-infra
  name: query-scheduler-headless
  namespace: cortex-monitoring-system
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 80
  - name: grpc-scheduler
    port: 9095
  publishNotReadyAddresses: true
  selector:
    app: query-scheduler
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: retrieval
    team: team-infra
  name: retrieval
  namespace: cortex-monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 9090
  selector:
    app: retrieval
    team: team-infra
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ruler
    team: team-infra
  name: ruler
  namespace: cortex-monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 80
  selector:
    app: ruler
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: s3
    team: team-infra
  name: s3
  namespace: cortex-monitoring-system
spec:
  ports:
  - name: http-metrics
    port: 9000
  selector:
    app: s3
    team: team-infra
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: store-gateway
    team: team-infra
  name: store-gateway-headless
  namespace: cortex-monitoring-system
spec:
  clusterIP: None
  ports:
  - name: http-metrics
    port: 80
  - name: grpc-store-gw
    port: 9095
  selector:
    app: store-gateway
    team: team-infra
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: distributor
    team: team-infra
  name: distributor
  namespace: cortex-monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: distributor
      team: team-infra
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io.port: "80"
        prometheus.io.scrape: "true"
      labels:
        app: distributor
        gossip_ring_member: "true"
        team: team-infra
    spec:
      containers:
      - args:
        - -target=distributor
        - -config.file=/etc/cortex/cortex.yaml
        - -log.level=info
        - -memberlist.bind-addr=$(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: quay.io/cortexproject/cortex:master-b6eea5f
        imagePullPolicy: IfNotPresent
        name: distributor
        ports:
        - containerPort: 80
          name: http-metrics
        - containerPort: 9095
          name: grpc-distribut
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 45
        volumeMounts:
        - mountPath: /etc/cortex
          name: cortex-config
        - mountPath: /var/cortex
          name: runtime-config
      terminationGracePeriodSeconds: 60
      volumes:
      - name: cortex-config
        secret:
          secretName: cortex-config-4d89b2thm6
      - configMap:
          name: runtime-config-4472tcfg89
        name: runtime-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
    team: team-infra
  name: grafana
  namespace: cortex-monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      team: team-infra
  template:
    metadata:
      annotations:
        prometheus.io.port: "3000"
        prometheus.io.scrape: "true"
      labels:
        app: grafana
        team: team-infra
    spec:
      containers:
      - env:
        - name: METHOD
        - name: LABEL
          value: grafana_dashboard
        - name: FOLDER
          value: /dashboards
        - name: RESOURCE
          value: both
        - name: NAMESPACE
          value: cortex-monitoring-system
        - name: FOLDER_ANNOTATION
          value: grafana_dashboard_folder
        image: quay.io/kiwigrid/k8s-sidecar:1.10.7
        imagePullPolicy: IfNotPresent
        name: grafana-sc-dashboard
        volumeMounts:
        - mountPath: /dashboards
          name: sc-dashboard-volume
      - image: grafana/grafana:8.0.1
        imagePullPolicy: IfNotPresent
        name: grafana
        ports:
        - containerPort: 80
          name: http-service
        - containerPort: 3000
          name: http-metrics
        volumeMounts:
        - mountPath: /etc/grafana/grafana.ini
          name: config
          subPath: grafana.ini
        - mountPath: /var/lib/grafana
          name: storage
        - mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
          name: config
          subPath: datasources.yaml
        - mountPath: /dashboards
          name: sc-dashboard-volume
        - mountPath: /etc/grafana/provisioning/dashboards/sc-dashboardproviders.yaml
          name: sc-dashboard-provider
          subPath: provider.yaml
      serviceAccountName: grafana
      volumes:
      - configMap:
          name: grafana-87ch5m52h9
        name: config
      - emptyDir: {}
        name: storage
      - emptyDir: {}
        name: sc-dashboard-volume
      - configMap:
          name: grafana-config-dashboards-f9dhd6k9t5
        name: sc-dashboard-provider
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx
    team: team-infra
  name: nginx
  namespace: cortex-monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
      team: team-infra
  template:
    metadata:
      annotations:
        prometheus.io.scrape: "false"
      labels:
        app: nginx
        team: team-infra
    spec:
      containers:
      - image: nginx:1.21.0
        imagePullPolicy: IfNotPresent
        name: nginx
        ports:
        - containerPort: 80
          name: http-metrics
        volumeMounts:
        - mountPath: /etc/nginx
          name: config-volume
      volumes:
      - configMap:
          name: nginx-k5g5f4tmg8
        name: config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: querier
    team: team-infra
  name: querier
  namespace: cortex-monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: querier
      team: team-infra
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io.port: "80"
        prometheus.io.scrape: "true"
      labels:
        app: querier
        gossip_ring_member: "true"
        team: team-infra
    spec:
      containers:
      - args:
        - -target=querier
        - -config.file=/etc/cortex/cortex.yaml
        - -log.level=info
        - -memberlist.bind-addr=$(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: quay.io/cortexproject/cortex:master-b6eea5f
        imagePullPolicy: IfNotPresent
        name: querier
        ports:
        - containerPort: 80
          name: http-metrics
        - containerPort: 9095
          name: grpc-querier
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 45
        volumeMounts:
        - mountPath: /etc/cortex
          name: cortex-config
        - mountPath: /var/cortex
          name: runtime-config
      terminationGracePeriodSeconds: 180
      volumes:
      - name: cortex-config
        secret:
          secretName: cortex-config-4d89b2thm6
      - configMap:
          name: runtime-config-4472tcfg89
        name: runtime-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: query-frontend
    team: team-infra
  name: query-frontend
  namespace: cortex-monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: query-frontend
      team: team-infra
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io.port: "80"
        prometheus.io.scrape: "true"
      labels:
        app: query-frontend
        team: team-infra
    spec:
      containers:
      - args:
        - -target=query-frontend
        - -config.file=/etc/cortex/cortex.yaml
        - -log.level=info
        image: quay.io/cortexproject/cortex:master-b6eea5f
        imagePullPolicy: IfNotPresent
        name: query-frontend
        ports:
        - containerPort: 80
          name: http-metrics
        - containerPort: 9095
          name: grpc-frontend
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 45
        volumeMounts:
        - mountPath: /etc/cortex
          name: cortex-config
        - mountPath: /var/cortex
          name: runtime-config
      terminationGracePeriodSeconds: 180
      volumes:
      - name: cortex-config
        secret:
          secretName: cortex-config-4d89b2thm6
      - configMap:
          name: runtime-config-4472tcfg89
        name: runtime-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: query-scheduler
    team: team-infra
  name: query-scheduler
  namespace: cortex-monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: query-scheduler
      team: team-infra
  template:
    metadata:
      annotations:
        prometheus.io.port: "80"
        prometheus.io.scrape: "true"
      labels:
        app: query-scheduler
        team: team-infra
    spec:
      containers:
      - args:
        - -target=query-scheduler
        - -config.file=/etc/cortex/cortex.yaml
        - -log.level=info
        image: quay.io/cortexproject/cortex:master-b6eea5f
        imagePullPolicy: IfNotPresent
        name: query-scheduler
        ports:
        - containerPort: 80
          name: http-metrics
        - containerPort: 9095
          name: grpc-scheduler
        volumeMounts:
        - mountPath: /etc/cortex
          name: cortex-config
        - mountPath: /var/cortex
          name: runtime-config
      volumes:
      - name: cortex-config
        secret:
          secretName: cortex-config-4d89b2thm6
      - configMap:
          name: runtime-config-4472tcfg89
        name: runtime-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: retrieval
    team: team-infra
  name: retrieval
  namespace: cortex-monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: retrieval
      team: team-infra
  template:
    metadata:
      annotations:
        prometheus.io.port: "9090"
        prometheus.io.scrape: "true"
      labels:
        app: retrieval
        team: team-infra
    spec:
      containers:
      - args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.retention.time=6h
        - --storage.tsdb.retention.size=10GB
        image: prom/prometheus:v2.27.1
        imagePullPolicy: IfNotPresent
        name: retrieval
        ports:
        - containerPort: 9090
          name: http-metrics
        volumeMounts:
        - mountPath: /etc/prometheus
          name: config-volume
      serviceAccountName: retrieval
      volumes:
      - configMap:
          name: retrieval-config-k5g65682fg
        name: config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ruler
    team: team-infra
  name: ruler
  namespace: cortex-monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ruler
      team: team-infra
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io.port: "80"
        prometheus.io.scrape: "true"
      labels:
        app: ruler
        gossip_ring_member: "true"
        team: team-infra
    spec:
      containers:
      - args:
        - -target=ruler
        - -config.file=/etc/cortex/cortex.yaml
        - -log.level=info
        - -memberlist.bind-addr=$(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: quay.io/cortexproject/cortex:master-b6eea5f
        imagePullPolicy: IfNotPresent
        name: ruler
        ports:
        - containerPort: 80
          name: http-metrics
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 45
        volumeMounts:
        - mountPath: /etc/cortex
          name: cortex-config
        - mountPath: /var/cortex
          name: runtime-config
        - mountPath: /rules
          name: rule-path
      terminationGracePeriodSeconds: 180
      volumes:
      - name: cortex-config
        secret:
          secretName: cortex-config-4d89b2thm6
      - configMap:
          name: runtime-config-4472tcfg89
        name: runtime-config
      - emptyDir: {}
        name: rule-path
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: s3
    team: team-infra
  name: s3
  namespace: cortex-monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: s3
      team: team-infra
  template:
    metadata:
      annotations:
        prometheus.io.path: /minio/prometheus/metrics
        prometheus.io.port: "9000"
        prometheus.io.scrape: "true"
      labels:
        app: s3
        team: team-infra
    spec:
      containers:
      - command:
        - sh
        - -c
        - mkdir -p /storage/cortex-tsdb && mkdir -p /storage/cortex-rules && minio
          server /storage
        env:
        - name: MINIO_PROMETHEUS_AUTH_TYPE
          value: public
        - name: MINIO_ACCESS_KEY
          value: cortex
        - name: MINIO_SECRET_KEY
          value: supersecret
        image: minio/minio:RELEASE.2021-04-22T15-44-28Z
        imagePullPolicy: IfNotPresent
        name: minio
        ports:
        - containerPort: 9000
          name: http-metrics
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: alertmanager
    team: team-infra
  name: alertmanager
  namespace: cortex-monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
      team: team-infra
  serviceName: alertmanager-headless
  template:
    metadata:
      annotations:
        prometheus.io.port: "80"
        prometheus.io.scrape: "true"
      labels:
        app: alertmanager
        gossip_ring_member: "true"
        team: team-infra
    spec:
      containers:
      - args:
        - -target=alertmanager
        - -config.file=/etc/cortex/cortex.yaml
        - -log.level=info
        - -alertmanager.cluster.advertise-address=$(POD_IP):9094
        - -memberlist.bind-addr=$(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: quay.io/cortexproject/cortex:master-b6eea5f
        imagePullPolicy: IfNotPresent
        name: alertmanager
        ports:
        - containerPort: 80
          name: http-metrics
          protocol: TCP
        - containerPort: 9093
          name: http-web
          protocol: TCP
        - containerPort: 9094
          name: tcp-cluster
          protocol: TCP
        - containerPort: 9094
          name: ucp-cluster
          protocol: UDP
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 45
        volumeMounts:
        - mountPath: /etc/cortex
          name: cortex-config
        - mountPath: /var/cortex
          name: runtime-config
      terminationGracePeriodSeconds: 60
      volumes:
      - name: cortex-config
        secret:
          secretName: cortex-config-4d89b2thm6
      - configMap:
          name: runtime-config-4472tcfg89
        name: runtime-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: compactor
    team: team-infra
  name: compactor
  namespace: cortex-monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: compactor
      team: team-infra
  serviceName: compactor-headless
  template:
    metadata:
      annotations:
        prometheus.io.port: "80"
        prometheus.io.scrape: "true"
      labels:
        app: compactor
        gossip_ring_member: "true"
        team: team-infra
    spec:
      containers:
      - args:
        - -target=compactor
        - -config.file=/etc/cortex/cortex.yaml
        - -log.level=info
        - -memberlist.bind-addr=$(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: quay.io/cortexproject/cortex:master-b6eea5f
        imagePullPolicy: IfNotPresent
        name: compactor
        ports:
        - containerPort: 80
          name: http-metrics
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 60
        volumeMounts:
        - mountPath: /etc/cortex
          name: cortex-config
        - mountPath: /var/cortex
          name: runtime-config
      terminationGracePeriodSeconds: 240
      volumes:
      - name: cortex-config
        secret:
          secretName: cortex-config-4d89b2thm6
      - configMap:
          name: runtime-config-4472tcfg89
        name: runtime-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: consul-server
    team: team-infra
  name: consul-server
  namespace: cortex-monitoring-system
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app: consul-server
      team: team-infra
  serviceName: consul-headless
  template:
    metadata:
      annotations:
        prometheus.io.path: /v1/agent/metrics
        prometheus.io.port: "8500"
        prometheus.io.scrape: "true"
      labels:
        app: consul-server
        team: team-infra
    spec:
      containers:
      - command:
        - /bin/sh
        - -ec
        - |
          CONSUL_FULLNAME="consul-server"

          exec /bin/consul agent \
          -advertise="${POD_IP}" \
          -bind=0.0.0.0 \
          -bootstrap-expect=3 \
          -client=0.0.0.0 \
          -datacenter=dc1 \
          -data-dir=/consul/data \
          -domain=cluster.local \
          -hcl='connect { enabled = true }' \
          -hcl='telemetry { prometheus_retention_time="6h" disable_hostname=true }' \
          -ui \
          -retry-join=${CONSUL_FULLNAME}-0.consul-headless.${NAMESPACE}.svc.cluster.local \
          -retry-join=${CONSUL_FULLNAME}-1.consul-headless.${NAMESPACE}.svc.cluster.local \
          -retry-join=${CONSUL_FULLNAME}-2.consul-headless.${NAMESPACE}.svc.cluster.local \
          -server
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: consul:1.9.4
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - consul leave
        name: consul
        ports:
        - containerPort: 8500
          name: http
        - containerPort: 8301
          name: serflan
        - containerPort: 8302
          name: serfwan
        - containerPort: 8300
          name: tcp-server
        - containerPort: 8600
          name: tcp-dns
          protocol: TCP
        - containerPort: 8600
          name: udp-dns
          protocol: UDP
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -ec
            - |
              curl http://127.0.0.1:8500/v1/status/leader \
              2>/dev/null | grep -E '".+"'
          failureThreshold: 2
          initialDelaySeconds: 5
          periodSeconds: 3
          successThreshold: 1
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /consul/data
          name: consul-data
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: consul-data
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: ingester
    team: team-infra
  name: ingester
  namespace: cortex-monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingester
      team: team-infra
  serviceName: ingester-headless
  template:
    metadata:
      annotations:
        prometheus.io.port: "80"
        prometheus.io.scrape: "true"
      labels:
        app: ingester
        gossip_ring_member: "true"
        team: team-infra
    spec:
      containers:
      - args:
        - -target=ingester
        - -config.file=/etc/cortex/cortex.yaml
        - -log.level=info
        - -memberlist.bind-addr=$(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: quay.io/cortexproject/cortex:master-b6eea5f
        imagePullPolicy: IfNotPresent
        name: ingester
        ports:
        - containerPort: 80
          name: http-metrics
        - containerPort: 9095
          name: grpc-ingester
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 60
        volumeMounts:
        - mountPath: /etc/cortex
          name: cortex-config
        - mountPath: /var/cortex
          name: runtime-config
      terminationGracePeriodSeconds: 240
      volumes:
      - name: cortex-config
        secret:
          secretName: cortex-config-4d89b2thm6
      - configMap:
          name: runtime-config-4472tcfg89
        name: runtime-config
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: memcached
    team: team-infra
  name: memcached
  namespace: cortex-monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: memcached
      team: team-infra
  serviceName: memcached-headless
  template:
    metadata:
      annotations:
        prometheus.io.port: "9150"
        prometheus.io.scrape: "true"
      labels:
        app: memcached
        team: team-infra
    spec:
      containers:
      - args:
        - -m 1024
        - -p 11211
        - -v
        image: memcached:1.6.9
        imagePullPolicy: IfNotPresent
        name: memcached
        ports:
        - containerPort: 11211
          name: tcp-memcached
      - args:
        - --memcached.address=localhost:11211
        - --web.listen-address=0.0.0.0:9150
        image: prom/memcached-exporter:v0.9.0
        imagePullPolicy: IfNotPresent
        name: expose-memcached-metrics
        ports:
        - containerPort: 9150
          name: http-metrics
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: store-gateway
    team: team-infra
  name: store-gateway
  namespace: cortex-monitoring-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: store-gateway
      team: team-infra
  serviceName: store-gateway-headless
  template:
    metadata:
      annotations:
        prometheus.io.port: "80"
        prometheus.io.scrape: "true"
      labels:
        app: store-gateway
        gossip_ring_member: "true"
        team: team-infra
    spec:
      containers:
      - args:
        - -target=store-gateway
        - -config.file=/etc/cortex/cortex.yaml
        - -log.level=info
        - -memberlist.bind-addr=$(POD_IP)
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: quay.io/cortexproject/cortex:master-b6eea5f
        imagePullPolicy: IfNotPresent
        name: store-gateway
        ports:
        - containerPort: 80
          name: http-metrics
          protocol: TCP
        - containerPort: 9095
          name: grpc-store-gw
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ready
            port: http-metrics
          initialDelaySeconds: 60
        volumeMounts:
        - mountPath: /etc/cortex
          name: cortex-config
        - mountPath: /var/cortex
          name: runtime-config
      terminationGracePeriodSeconds: 240
      volumes:
      - name: cortex-config
        secret:
          secretName: cortex-config-4d89b2thm6
      - configMap:
          name: runtime-config-4472tcfg89
        name: runtime-config
